# Pipelines are made of one or more jobs and may include resources and variables.
# Jobs are made of one or more steps plus some job-specific data. Steps can be
# tasks, scripts, or references to external templates.

jobs:
  # - job: Linux
  #   pool:
  #     vmImage: 'ubuntu-16.04'
  #   strategy:
  #     maxParallel: 2
  #     matrix:
  #       py36:
  #         PY_VERSION: 3.6
  #       # py27:
  #       #   PY_VERSION: 2.7
  #   steps:
  #       # NOTE: On Linux, there is no write permission in the miniconda installation,
  #       # and the CondaEnvironment@1 does not honor a prefix. Therefore we can *not*
  #       # use the conda that comes with Azure as we do on Windows. This is also
  #       # documented in the following issue: https://github.com/Microsoft/vsts-tasks/issues/8299
  #       # Therefore we need to create our own conda environment from scratch.
  #     - task: CondaEnvironment@1
  #       inputs:
  #         updateConda: false
  #     - script: |
  #         echo "Will create the conda environment" || exit 1
  #         conda create --quiet --yes --mkdir --prefix $AGENT_WORKFOLDER/envs/vigra --channel conda-forge/label/gcc7 python=$(PY_VERSION) || exit 1
  #         echo "Will activate the conda environment" || exit 1
  #         source $CONDA/bin/activate $AGENT_WORKFOLDER/envs/vigra || exit 1
  #         echo "Will start the conda install of prerequisites" || exit 1
  #         conda install --quiet --yes --mkdir --channel conda-forge/label/gcc7 jpeg libpng libtiff hdf5 fftw boost boost-cpp numpy nose || exit 1
  #         mkdir build || exit 1
  #         cd build || exit 1
  #         echo "Will start the cmake configuration" || exit 1
  #         cmake .. -DTEST_VIGRANUMPY=1 -DDEPENDENCY_SEARCH_PREFIX="$CONDA_PREFIX" -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" || exit 1
  #         echo "Will start the cmake based build" || exit 1
  #         cmake --build . --target check --config Release || exit 1
  #         echo "Completed script successfully" || exit 1
  - job: macOS
    pool:
      vmImage: 'macOS-10.13'
    strategy:
      maxParallel: 2
      matrix:
        py36:
          PY_VERSION: 3.6
        # py27:
        #   PY_VERSION: 2.7
    steps:
      # This build is practially identical to the Linux build above. One ugly part
      # is the selection of the XCode version. The documentation suggests to either
      # use an "XCode task" or to manually set the XCode version using "xcode-select".
      # I could not get the XCode task to run without an XCode project first, so I
      # chose to use xcode-select. This works well, but requires to manually specify
      # the exact version below.
      # /Applications/Xcode.app/Contents/Developer
      # /Applications/Xcode_10.app/Contents/Developer
      # /Applications/Xcode_10.1.app/Contents/Developer
      # /Applications/Xcode_10.1_beta_2.app/Contents/Developer
      # /Applications/Xcode_10_beta.app/Contents/Developer
      # /Applications/Xcode_8.app/Contents/Developer
      # /Applications/Xcode_8.1.app/Contents/Developer
      # /Applications/Xcode_8.2.1.app/Contents/Developer
      # /Applications/Xcode_8.2.app/Contents/Developer
      # /Applications/Xcode_8.3.1.app/Contents/Developer
      # /Applications/Xcode_8.3.2.app/Contents/Developer
      # /Applications/Xcode_8.3.3.app/Contents/Developer
      # /Applications/Xcode_9.app/Contents/Developer
      # /Applications/Xcode_9.0.1.app/Contents/Developer
      # /Applications/Xcode_9.1.app/Contents/Developer
      # /Applications/Xcode_9.2.app/Contents/Developer
      # /Applications/Xcode_9.3.1.app/Contents/Developer
      # /Applications/Xcode_9.3.app/Contents/Developer
      # /Applications/Xcode_9.3_beta.app/Contents/Developer
      # /Applications/Xcode_9.4-beta.app/Contents/Developer
      # /Applications/Xcode_9.4.1.app/Contents/Developer
      # /Applications/Xcode_9.4.app/Contents/Developer
      # /Applications/Xcode_9.4_beta.app/Contents/Developer
      # /Applications/Xcode_9.4_beta_2.app/Contents/Developer
      - task: CondaEnvironment@1
        inputs:
          updateConda: false
      - script: |
          echo "Listing availbale XCode versions:" || exit 1
          ls -lad /Applications/Xcode_*.app/Contents/Developer || exit 1
          echo "Will select the XCode version" || exit 1
          sudo xcode-select -s /Applications/Xcode_10.1.app/Contents/Developer || exit 1
          echo "Will create the conda environment" || exit 1
          conda create --quiet --yes --mkdir --prefix $AGENT_WORKFOLDER/envs/vigra --channel conda-forge python=$(PY_VERSION) || exit 1
          echo "Will activate the conda environment" || exit 1
          source $CONDA/bin/activate $AGENT_WORKFOLDER/envs/vigra || exit 1
          echo "Will start the conda install of prerequisites" || exit 1
          # disable some packages for now (internal compiler error):
          conda install --quiet --yes --mkdir --channel conda-forge jpeg libpng libtiff hdf5 || exit 1
          conda install --quiet --yes --mkdir --channel conda-forge fftw boost boost-cpp numpy nose || exit 1
          mkdir build || exit 1
          cd build || exit 1
          echo "Will start the cmake configuration" || exit 1
          cmake .. -DTEST_VIGRANUMPY=1 -DDEPENDENCY_SEARCH_PREFIX="$CONDA_PREFIX" -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" || exit 1
          echo "Will start the cmake based build" || exit 1
          cmake --build . --target check --config Release || exit 1
          echo "Completed script successfully" || exit 1
  - job: Windows
    pool:
      vmImage: 'vs2017-win2016'
    strategy:
      maxParallel: 2
      matrix:
        py36:
          PY_VERSION: 3.6
        # py27:
        #   PY_VERSION: 2.7
    steps:
      - task: CondaEnvironment@1
        inputs:
          updateConda: false
      - script: |
          echo "Will create the conda environment" || exit 1
          conda create --quiet --yes --mkdir --prefix %AGENT_WORKFOLDER%\envs\vigra --channel conda-forge python=$(PY_VERSION) || exit 1
          echo "Will activate the conda environment" || exit 1
          call activate %AGENT_WORKFOLDER%\envs\vigra || exit 1
          echo "Will start the conda install of prerequisites" || exit 1
          conda install --quiet --yes --mkdir --channel conda-forge jpeg libpng libtiff hdf5 fftw boost boost-cpp numpy nose || exit 1
          mkdir build || exit 1
          cd build || exit 1
          echo "Will start the cmake configuration" || exit 1
          cmake .. -DTEST_VIGRANUMPY=1 -DDEPENDENCY_SEARCH_PREFIX="%CONDA_PREFIX%\Library" -DCMAKE_PREFIX_PATH="%CONDA_PREFIX%\Library" -DCMAKE_GENERATOR_PLATFORM="x64" || exit 1
          echo "Will start the cmake based build" || exit 1
          cmake --build . --target check_python --config Release || exit 1
          echo "Completed script successfully" || exit 1
